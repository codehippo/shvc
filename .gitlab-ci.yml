stages:
  - build
  - test
  - lint
  - style
  - coverage
  - release

workflow:
  rules:
    - if: $CI_PIPELINE_SOURCE == "push"

variables:
  GIT_DEPTH: 0
  GIT_SUBMODULE_STRATEGY: recursive
  GIT_SUBMODULE_UPDATE_FLAGS: --jobs 2

.nix:
  tags:
    - nix

## Build stage #################################################################
build:
  stage: build
  extends: .nix
  script:
    - nix develop -c meson setup build -Doptimization=plain $SETUP_ARGS
    - nix develop -c meson compile -C build
  artifacts:
    when: on_failure
    expire_in: 1 week
    paths:
    - 'build/meson-logs/'

build-werror:
  extends: build
  allow_failure: true
  variables:
    SETUP_ARGS: --werror

nix:
  stage: build
  allow_failure: true
  extends: .nix
  script:
    - nix build .?submodules=1

## Test stage ##################################################################
tests:
  stage: test
  extends: .nix
  script:
    - "nix develop -c meson setup build -Doptimization=plain"
    - "nix develop -c meson test -C build"
  artifacts:
    when: on_failure
    expire_in: 1 week
    paths:
      - 'build/meson-logs/'
    reports:
      junit: 'build/meson-logs/testlog.junit.xml'

valgrind:memcheck:
  extends: tests
  variables:
    VALGRIND: memcheck

valgrind:helgrind:
  extends: tests
  variables:
    VALGRIND: helgrind

valgrind:drd:
  extends: tests
  variables:
    VALGRIND: drd

nix-check:
  stage: test
  extends: .nix
  script:
    - nix flake check .?submodules=1

include:
  - template: Security/SAST.gitlab-ci.yml
  - template: Security/Secret-Detection.gitlab-ci.yml

## Linters #####################################################################
.linter:
  stage: lint
  extends: .nix
  allow_failure: true
  script:
    - nix develop -c meson setup build -Doptimization=plain
    - nix develop -c meson compile -C build $COMPILE_ARG

cppcheck:
  extends: .linter
  variables:
    COMPILE_ARG: ./cppcheck

flawfinder:
  extends: .linter
  variables:
    COMPILE_ARG: ./flawfinder

shellcheck:
  extends: .linter
  script:
    - "git ls-files '**.sh' | xargs nix develop -c shellcheck"

## Style stage #################################################################
muon:
  stage: style
  extends: .nix
  allow_failure: true
  script:
    - "git ls-files '**/meson.build' meson_options.txt | nix develop -c xargs -n 1 muon fmt -c .muon_fmt.ini -i"
    - "git diff --exit-code"

clang-format:
  stage: style
  extends: .nix
  allow_failure: true
  script:
    - "git ls-files '**.[ch]' | xargs nix develop -c clang-format -i"
    - "git diff --exit-code"

shell-format:
  stage: style
  extends: .nix
  allow_failure: true
  script:
    - "git ls-files '**.sh' '**.bats' | xargs nix develop -c shfmt --binary-next-line -w"
    - "git diff --exit-code"

nixfmt:
  stage: style
  extends: .nix
  allow_failure: true
  script:
    - "nix fmt"
    - "git diff --exit-code"

editorconfig-checker:
  stage: style
  extends: .nix
  allow_failure: true
  script:
    - "nix develop -c editorconfig-checker -disable-max-line-length"

## Code Coverage stage #########################################################
coverage:
  stage: coverage
  extends: .nix
  needs: ["tests"]
  script:
    - "nix develop -c meson setup -Db_coverage=true -Doptimization=plain build"
    - "nix develop -c meson test -C build"
    - "nix develop -c ninja -C build coverage-html"
    - "mv build/meson-logs/coveragereport ./"
  coverage: '/lines\.\.\.\.\.\.: (\d+.\d+%)/'
  artifacts:
    expire_in: 1 month
    expose_as: 'Code Coverage'
    paths:
    - 'coveragereport/'

## Release creation ############################################################
dist:
  stage: release
  extends: .nix
  needs: ["tests"]
  script:
    - "nix develop -c meson setup build"
    - "nix develop -c meson dist -C build --formats xztar,gztar,zip"
    - "mv build/meson-dist/* ./"
  artifacts:
    expire_in: 1 month
    paths:
      - "*.tar.xz"
      - "*.tar.gz"
      - "*.zip"

release:
  stage: release
  image: "registry.gitlab.com/gitlab-org/release-cli:latest"
  rules:
    - if: '$CI_COMMIT_TAG'
  needs:
    - job: dist
      artifacts: true
  before_script:
    - "apk update"
    - "apk add bash curl"
  script:
    - "bash .release.sh shvtreec"
